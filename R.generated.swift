//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `AddProjectViewController`, and contains static references to 2 segues.
    struct addProjectViewController {
      /// Segue identifier `ShowSelectParentProjectViewController`.
      static let showSelectParentProjectViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddProjectViewController, SelectProjectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowSelectParentProjectViewController")
      /// Segue identifier `ShowSelectProjectColorViewController`.
      static let showSelectProjectColorViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddProjectViewController, SelectProjectColorViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowSelectProjectColorViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowSelectParentProjectViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSelectParentProjectViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddProjectViewController, SelectProjectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addProjectViewController.showSelectParentProjectViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowSelectProjectColorViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSelectProjectColorViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddProjectViewController, SelectProjectColorViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addProjectViewController.showSelectProjectColorViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `AddTaskViewController`, and contains static references to 2 segues.
    struct addTaskViewController {
      /// Segue identifier `Show SelectTaskPriorityViewController`.
      static let showSelectTaskPriorityViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddTaskViewController, SelectTaskPriorityViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show SelectTaskPriorityViewController")
      /// Segue identifier `ShowDatePickerViewController`.
      static let showDatePickerViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddTaskViewController, DatePickerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowDatePickerViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `Show SelectTaskPriorityViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSelectTaskPriorityViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddTaskViewController, SelectTaskPriorityViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addTaskViewController.showSelectTaskPriorityViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowDatePickerViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDatePickerViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddTaskViewController, DatePickerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addTaskViewController.showDatePickerViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ProjectDetailsViewController`, and contains static references to 3 segues.
    struct projectDetailsViewController {
      /// Segue identifier `ShowAddTaskViewController`.
      static let showAddTaskViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectDetailsViewController, AddTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowAddTaskViewController")
      /// Segue identifier `ShowEditTaskViewController`.
      static let showEditTaskViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectDetailsViewController, EditTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEditTaskViewController")
      /// Segue identifier `ShowProjectDetailsFiltersViewController`.
      static let showProjectDetailsFiltersViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectDetailsViewController, ProjectDetailsFiltersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowProjectDetailsFiltersViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowAddTaskViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddTaskViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectDetailsViewController, AddTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectDetailsViewController.showAddTaskViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowEditTaskViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEditTaskViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectDetailsViewController, EditTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectDetailsViewController.showEditTaskViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowProjectDetailsFiltersViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showProjectDetailsFiltersViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectDetailsViewController, ProjectDetailsFiltersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectDetailsViewController.showProjectDetailsFiltersViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ProjectsListViewController`, and contains static references to 3 segues.
    struct projectsListViewController {
      /// Segue identifier `ShowAddProjectViewController`.
      static let showAddProjectViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectsListViewController, AddProjectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowAddProjectViewController")
      /// Segue identifier `ShowEditProjectViewController`.
      static let showEditProjectViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectsListViewController, EditProjectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEditProjectViewController")
      /// Segue identifier `ShowProjectFiltersViewController`.
      static let showProjectFiltersViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProjectsListViewController, ProjectFiltersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowProjectFiltersViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowAddProjectViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddProjectViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectsListViewController, AddProjectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectsListViewController.showAddProjectViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowEditProjectViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEditProjectViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectsListViewController, EditProjectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectsListViewController.showEditProjectViewController, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowProjectFiltersViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showProjectFiltersViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProjectsListViewController, ProjectFiltersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.projectsListViewController.showProjectFiltersViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `TasksListViewController`, and contains static references to 1 segues.
    struct tasksListViewController {
      /// Segue identifier `ShowTasksListFiltersViewController`.
      static let showTasksListFiltersViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TasksListViewController, TasksListFiltersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowTasksListFiltersViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ShowTasksListFiltersViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTasksListFiltersViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TasksListViewController, TasksListFiltersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tasksListViewController.showTasksListFiltersViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Projectdetails`.
    static let projectdetails = _R.storyboard.projectdetails()
    /// Storyboard `Projectslist`.
    static let projectslist = _R.storyboard.projectslist()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Splitmenu`.
    static let splitmenu = _R.storyboard.splitmenu()
    /// Storyboard `Taskslist`.
    static let taskslist = _R.storyboard.taskslist()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Projectdetails", bundle: ...)`
    static func projectdetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.projectdetails)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Projectslist", bundle: ...)`
    static func projectslist(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.projectslist)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Splitmenu", bundle: ...)`
    static func splitmenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splitmenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Taskslist", bundle: ...)`
    static func taskslist(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.taskslist)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `CellsColor`.
    static let cellsColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CellsColor")
    /// Color `DefaultPriority`.
    static let defaultPriority = Rswift.ColorResource(bundle: R.hostingBundle, name: "DefaultPriority")
    /// Color `IconsTintColor`.
    static let iconsTintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconsTintColor")
    /// Color `NavigationBarColor`.
    static let navigationBarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigationBarColor")
    /// Color `NavigationBarTextColor`.
    static let navigationBarTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigationBarTextColor")
    /// Color `NoNetworkBannerBackgroundColor`.
    static let noNetworkBannerBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NoNetworkBannerBackgroundColor")
    /// Color `SearchBarColor`.
    static let searchBarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SearchBarColor")
    /// Color `SelectedCellColor`.
    static let selectedCellColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SelectedCellColor")
    /// Color `TableViewColor`.
    static let tableViewColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TableViewColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CellsColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cellsColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cellsColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DefaultPriority", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultPriority(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultPriority, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconsTintColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconsTintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconsTintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NavigationBarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigationBarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigationBarColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NavigationBarTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigationBarTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigationBarTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NoNetworkBannerBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func noNetworkBannerBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.noNetworkBannerBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SearchBarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func searchBarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.searchBarColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SelectedCellColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectedCellColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectedCellColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TableViewColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tableViewColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tableViewColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CellsColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cellsColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cellsColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DefaultPriority", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func defaultPriority(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.defaultPriority.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconsTintColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconsTintColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconsTintColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "NavigationBarColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func navigationBarColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.navigationBarColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "NavigationBarTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func navigationBarTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.navigationBarTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "NoNetworkBannerBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func noNetworkBannerBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.noNetworkBannerBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SearchBarColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func searchBarColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.searchBarColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SelectedCellColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func selectedCellColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.selectedCellColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TableViewColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tableViewColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tableViewColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityDeviceAudioInput = true
    static let comAppleSecurityNetworkClient = true

    struct keychainAccessGroups {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 38 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `az-sort`.
    static let azSort = Rswift.ImageResource(bundle: R.hostingBundle, name: "az-sort")
    /// Image `bookmark-1`.
    static let bookmark1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark-1")
    /// Image `bookmark.add`.
    static let bookmarkAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark.add")
    /// Image `bookmark.fill-1`.
    static let bookmarkFill1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark.fill-1")
    /// Image `bookmark.remove`.
    static let bookmarkRemove = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark.remove")
    /// Image `button.checked`.
    static let buttonChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "button.checked")
    /// Image `button`.
    static let button = Rswift.ImageResource(bundle: R.hostingBundle, name: "button")
    /// Image `byCreationAZ`.
    static let byCreationAZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "byCreationAZ")
    /// Image `byCreationZA`.
    static let byCreationZA = Rswift.ImageResource(bundle: R.hostingBundle, name: "byCreationZA")
    /// Image `byDateAZ`.
    static let byDateAZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "byDateAZ")
    /// Image `byDateZA`.
    static let byDateZA = Rswift.ImageResource(bundle: R.hostingBundle, name: "byDateZA")
    /// Image `byPriorityAZ`.
    static let byPriorityAZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "byPriorityAZ")
    /// Image `byPriorityZA`.
    static let byPriorityZA = Rswift.ImageResource(bundle: R.hostingBundle, name: "byPriorityZA")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `exclamation`.
    static let exclamation = Rswift.ImageResource(bundle: R.hostingBundle, name: "exclamation")
    /// Image `filter_fill`.
    static let filter_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_fill")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `flag`.
    static let flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag")
    /// Image `folder.fill`.
    static let folderFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder.fill")
    /// Image `folder.single.fill`.
    static let folderSingleFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder.single.fill")
    /// Image `folder.single`.
    static let folderSingle = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder.single")
    /// Image `folder1`.
    static let folder1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder1")
    /// Image `folder`.
    static let folder = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder")
    /// Image `gear.fill`.
    static let gearFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear.fill")
    /// Image `gear`.
    static let gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `list.fill`.
    static let listFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "list.fill")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `mic`.
    static let mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic")
    /// Image `related.project`.
    static let relatedProject = Rswift.ImageResource(bundle: R.hostingBundle, name: "related.project")
    /// Image `remove`.
    static let remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "remove")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `stack.fill`.
    static let stackFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "stack.fill")
    /// Image `stack`.
    static let stack = Rswift.ImageResource(bundle: R.hostingBundle, name: "stack")
    /// Image `za-sort`.
    static let zaSort = Rswift.ImageResource(bundle: R.hostingBundle, name: "za-sort")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "az-sort", bundle: ..., traitCollection: ...)`
    static func azSort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.azSort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark-1", bundle: ..., traitCollection: ...)`
    static func bookmark1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark.add", bundle: ..., traitCollection: ...)`
    static func bookmarkAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark.fill-1", bundle: ..., traitCollection: ...)`
    static func bookmarkFill1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkFill1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark.remove", bundle: ..., traitCollection: ...)`
    static func bookmarkRemove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkRemove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button", bundle: ..., traitCollection: ...)`
    static func button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button.checked", bundle: ..., traitCollection: ...)`
    static func buttonChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byCreationAZ", bundle: ..., traitCollection: ...)`
    static func byCreationAZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byCreationAZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byCreationZA", bundle: ..., traitCollection: ...)`
    static func byCreationZA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byCreationZA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byDateAZ", bundle: ..., traitCollection: ...)`
    static func byDateAZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byDateAZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byDateZA", bundle: ..., traitCollection: ...)`
    static func byDateZA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byDateZA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byPriorityAZ", bundle: ..., traitCollection: ...)`
    static func byPriorityAZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byPriorityAZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "byPriorityZA", bundle: ..., traitCollection: ...)`
    static func byPriorityZA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.byPriorityZA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exclamation", bundle: ..., traitCollection: ...)`
    static func exclamation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exclamation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_fill", bundle: ..., traitCollection: ...)`
    static func filter_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag", bundle: ..., traitCollection: ...)`
    static func flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder", bundle: ..., traitCollection: ...)`
    static func folder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder.fill", bundle: ..., traitCollection: ...)`
    static func folderFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder.single", bundle: ..., traitCollection: ...)`
    static func folderSingle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderSingle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder.single.fill", bundle: ..., traitCollection: ...)`
    static func folderSingleFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderSingleFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder1", bundle: ..., traitCollection: ...)`
    static func folder1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folder1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gear", bundle: ..., traitCollection: ...)`
    static func gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gear.fill", bundle: ..., traitCollection: ...)`
    static func gearFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gearFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list.fill", bundle: ..., traitCollection: ...)`
    static func listFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic", bundle: ..., traitCollection: ...)`
    static func mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "related.project", bundle: ..., traitCollection: ...)`
    static func relatedProject(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.relatedProject, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remove", bundle: ..., traitCollection: ...)`
    static func remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stack", bundle: ..., traitCollection: ...)`
    static func stack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stack.fill", bundle: ..., traitCollection: ...)`
    static func stackFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stackFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "za-sort", bundle: ..., traitCollection: ...)`
    static func zaSort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zaSort, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `ColorCVCell`.
    static let colorCVCell = _R.nib._ColorCVCell()
    /// Nib `DeleteButtonCell`.
    static let deleteButtonCell = _R.nib._DeleteButtonCell()
    /// Nib `ProjectCell`.
    static let projectCell = _R.nib._ProjectCell()
    /// Nib `SelectOptionCell`.
    static let selectOptionCell = _R.nib._SelectOptionCell()
    /// Nib `SelectProjectColorCell`.
    static let selectProjectColorCell = _R.nib._SelectProjectColorCell()
    /// Nib `TaskCell`.
    static let taskCell = _R.nib._TaskCell()
    /// Nib `TaskPriorityCell`.
    static let taskPriorityCell = _R.nib._TaskPriorityCell()
    /// Nib `TextFieldCell`.
    static let textFieldCell = _R.nib._TextFieldCell()
    /// Nib `ToggleButtonCell`.
    static let toggleButtonCell = _R.nib._ToggleButtonCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColorCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.colorCVCell) instead")
    static func colorCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeleteButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deleteButtonCell) instead")
    static func deleteButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deleteButtonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProjectCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.projectCell) instead")
    static func projectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.projectCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectOptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectOptionCell) instead")
    static func selectOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectOptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectProjectColorCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectProjectColorCell) instead")
    static func selectProjectColorCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectProjectColorCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaskCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taskCell) instead")
    static func taskCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaskPriorityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taskPriorityCell) instead")
    static func taskPriorityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskPriorityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textFieldCell) instead")
    static func textFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textFieldCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ToggleButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toggleButtonCell) instead")
    static func toggleButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toggleButtonCell)
    }
    #endif

    static func colorCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorCVCell? {
      return R.nib.colorCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorCVCell
    }

    static func deleteButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeleteButtonCell? {
      return R.nib.deleteButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeleteButtonCell
    }

    static func projectCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProjectCell? {
      return R.nib.projectCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProjectCell
    }

    static func selectOptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectOptionCell? {
      return R.nib.selectOptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectOptionCell
    }

    static func selectProjectColorCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectProjectColorCell? {
      return R.nib.selectProjectColorCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectProjectColorCell
    }

    static func taskCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskCell? {
      return R.nib.taskCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskCell
    }

    static func taskPriorityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskPriorityCell? {
      return R.nib.taskPriorityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskPriorityCell
    }

    static func textFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextFieldCell? {
      return R.nib.textFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldCell
    }

    static func toggleButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToggleButtonCell? {
      return R.nib.toggleButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToggleButtonCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ColorCVCell`.
    static let colorCVCell: Rswift.ReuseIdentifier<ColorCVCell> = Rswift.ReuseIdentifier(identifier: "ColorCVCell")
    /// Reuse identifier `DeleteButtonCell`.
    static let deleteButtonCell: Rswift.ReuseIdentifier<DeleteButtonCell> = Rswift.ReuseIdentifier(identifier: "DeleteButtonCell")
    /// Reuse identifier `ProjectCell`.
    static let projectCell: Rswift.ReuseIdentifier<ProjectCell> = Rswift.ReuseIdentifier(identifier: "ProjectCell")
    /// Reuse identifier `SelectOptionCell`.
    static let selectOptionCell: Rswift.ReuseIdentifier<SelectOptionCell> = Rswift.ReuseIdentifier(identifier: "SelectOptionCell")
    /// Reuse identifier `SelectProjectColorCell`.
    static let selectProjectColorCell: Rswift.ReuseIdentifier<SelectProjectColorCell> = Rswift.ReuseIdentifier(identifier: "SelectProjectColorCell")
    /// Reuse identifier `TaskCell`.
    static let taskCell: Rswift.ReuseIdentifier<TaskCell> = Rswift.ReuseIdentifier(identifier: "TaskCell")
    /// Reuse identifier `TaskPriorityCell`.
    static let taskPriorityCell: Rswift.ReuseIdentifier<TaskPriorityCell> = Rswift.ReuseIdentifier(identifier: "TaskPriorityCell")
    /// Reuse identifier `TextFieldCell`.
    static let textFieldCell: Rswift.ReuseIdentifier<TextFieldCell> = Rswift.ReuseIdentifier(identifier: "TextFieldCell")
    /// Reuse identifier `ToggleButtonCell`.
    static let toggleButtonCell: Rswift.ReuseIdentifier<ToggleButtonCell> = Rswift.ReuseIdentifier(identifier: "ToggleButtonCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 126 localization keys.
    struct localizable {
      /// en translation: Add new project
      ///
      /// Locales: en, ru
      static let editProjectScreen_titleAdd = Rswift.StringResource(key: "edit.project.screen_title.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add new project
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertAddprojectButton = Rswift.StringResource(key: "projects.list.screen_alert.addproject.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add new task
      ///
      /// Locales: en, ru
      static let editTaskScreen_titleAdd = Rswift.StringResource(key: "edit.task.screen_title.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add one by clicking '+' button below
      ///
      /// Locales: en, ru
      static let tableview_noProjectsMessage = Rswift.StringResource(key: "tableview_no.projects.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add one by clicking '+' button below
      ///
      /// Locales: en, ru
      static let tableview_noTasksMessage = Rswift.StringResource(key: "tableview_no.tasks.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: After logout your login and password will be deleted from device.
      ///
      /// Locales: en, ru
      static let settingsController_logoutSectionFooter = Rswift.StringResource(key: "settings.controller_logout.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: All projects
      ///
      /// Locales: en, ru
      static let projectsListScreen_title = Rswift.StringResource(key: "projects.list.screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: All tasks
      ///
      /// Locales: en, ru
      static let allTasksController_title = Rswift.StringResource(key: "all.tasks.controller_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Attention! Project will be deleted completely. Restoring is impossible.
      ///
      /// Locales: en, ru
      static let editProjectScreen_deleteSectionFooter = Rswift.StringResource(key: "edit.project.screen_delete.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Attention! task will be deleted completely. Restoring is impossible.
      ///
      /// Locales: en, ru
      static let editTaskScreen_deleteSectionFooter = Rswift.StringResource(key: "edit.task.screen_delete.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Authorization
      ///
      /// Locales: en, ru
      static let authorizationScreen_title = Rswift.StringResource(key: "authorization.screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By creation date
      ///
      /// Locales: en, ru
      static let tasksFiltersScreen_creationSection = Rswift.StringResource(key: "tasks.filters.screen_creation.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By date ascending
      ///
      /// Locales: en, ru
      static let taskDescriptor_dateAscending = Rswift.StringResource(key: "task.descriptor_date.ascending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By date descending
      ///
      /// Locales: en, ru
      static let taskDescriptor_dateDescending = Rswift.StringResource(key: "task.descriptor_date.descending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By planned date
      ///
      /// Locales: en, ru
      static let tasksFiltersScreen_dateSection = Rswift.StringResource(key: "tasks.filters.screen_date.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: By priority
      ///
      /// Locales: en, ru
      static let tasksFiltersScreen_prioritySection = Rswift.StringResource(key: "tasks.filters.screen_priority.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Can't get authorization token from server. Try later
      ///
      /// Locales: en, ru
      static let authError_emptyToken = Rswift.StringResource(key: "auth.error_empty.token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertCancelDeletionButton = Rswift.StringResource(key: "projects.list.screen_alert.cancel.deletion.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertCanceladdingButton = Rswift.StringResource(key: "projects.list.screen_alert.canceladding.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Change ordering
      ///
      /// Locales: en, ru
      static let filtersScreen_title = Rswift.StringResource(key: "filters.screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Choose color
      ///
      /// Locales: en, ru
      static let editProjectScreen_colorCellEmpty = Rswift.StringResource(key: "edit.project.screen_color.cell.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Choose parent
      ///
      /// Locales: en, ru
      static let editProjectScreen_parentCellEmpty = Rswift.StringResource(key: "edit.project.screen_parent.cell.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, ru
      static let tableView_contextualactionClose = Rswift.StringResource(key: "table.view_contextualaction.close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Converting data to update info on your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static let watchSession_decodingFailed = Rswift.StringResource(key: "watch.session_decoding.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Converting data to update info on your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static let watchSession_encodingFailed = Rswift.StringResource(key: "watch.session_encoding.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Created long ago
      ///
      /// Locales: en, ru
      static let taskDescriptor_createdAscending = Rswift.StringResource(key: "task.descriptor_created.ascending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Created recently
      ///
      /// Locales: en, ru
      static let taskDescriptor_createdDescending = Rswift.StringResource(key: "task.descriptor_created.descending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Default
      ///
      /// Locales: en, ru
      static let priority_low = Rswift.StringResource(key: "priority_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ru
      static let editTaskScreen_deleteCellTitle = Rswift.StringResource(key: "edit.task.screen_delete.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertConfirmDeletionButton = Rswift.StringResource(key: "projects.list.screen_alert.confirm.deletion.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ru
      static let tableView_contextualactionDelete = Rswift.StringResource(key: "table.view_contextualaction.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Delete project
      ///
      /// Locales: en, ru
      static let editProjectScreen_deleteSectionHeader = Rswift.StringResource(key: "edit.project.screen_delete.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Delete task
      ///
      /// Locales: en, ru
      static let editTaskScreen_deleteSectionHeader = Rswift.StringResource(key: "edit.task.screen_delete.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Deleted
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertDeleted = Rswift.StringResource(key: "projects.list.screen_alert.deleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Device is offline
      ///
      /// Locales: en, ru
      static let reachability_offlineTitle = Rswift.StringResource(key: "reachability_offline.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Do you really want to delete project?
      ///
      /// Locales: en, ru
      static let projectsListScreen_alertDeleteprojectTitle = Rswift.StringResource(key: "projects.list.screen_alert.deleteproject.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Do you really want to delete task?
      ///
      /// Locales: en, ru
      static let editTaskScreen_deleteConfirmationTitle = Rswift.StringResource(key: "edit.task.screen_delete.confirmation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Do you really want to log out?
      ///
      /// Locales: en, ru
      static let settingsController_alertLogoutTitle = Rswift.StringResource(key: "settings.controller_alert.logout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Due date
      ///
      /// Locales: en, ru
      static let editTaskScreen_dateSectionHeader = Rswift.StringResource(key: "edit.task.screen_date.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, ru
      static let tableView_contextualactionEdit = Rswift.StringResource(key: "table.view_contextualaction.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Edit project
      ///
      /// Locales: en, ru
      static let editProjectScreen_titleEdit = Rswift.StringResource(key: "edit.project.screen_title.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Edit task
      ///
      /// Locales: en, ru
      static let editTaskScreen_titleEdit = Rswift.StringResource(key: "edit.task.screen_title.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ru
      static let authorizationScreen_alertErrorMessage = Rswift.StringResource(key: "authorization.screen_alert.errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Error occured. Try later.
      ///
      /// Locales: en, ru
      static let editProjectScreen_alertProjectActionError = Rswift.StringResource(key: "edit.project.screen_alert.project.action.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Error occured. Try later.
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertTaskActionError = Rswift.StringResource(key: "edit.task.screen_alert.task.action.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: High
      ///
      /// Locales: en, ru
      static let priority_urgent = Rswift.StringResource(key: "priority_urgent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Higher priority first
      ///
      /// Locales: en, ru
      static let taskDescriptor_priorityDescending = Rswift.StringResource(key: "task.descriptor_priority.descending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: If the task is a part of existing project, select it to keep the hierarchy. By default all new tasks without related project are moved to Inbox project.
      ///
      /// Locales: en, ru
      static let editTaskScreen_projectSectionFooter = Rswift.StringResource(key: "edit.task.screen_project.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: If you mark your project as favorite, it will be placed on top of your projects list.
      ///
      /// Locales: en, ru
      static let editProjectScreen_favoriteSectionFooter = Rswift.StringResource(key: "edit.project.screen_favorite.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: If your new project is a subproject of existing one, select its parent to keep the hierarchy.
      ///
      /// Locales: en, ru
      static let editProjectScreen_parentSectionFooter = Rswift.StringResource(key: "edit.project.screen_parent.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: If your task has deadline - select appropriate date and time, it will be displayed on task's cell. By default task doesn't have due date.
      ///
      /// Locales: en, ru
      static let editTaskScreen_dateSectionFooter = Rswift.StringResource(key: "edit.task.screen_date.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Invalid authorization redirect. Try again
      ///
      /// Locales: en, ru
      static let authError_notValidUrl = Rswift.StringResource(key: "auth.error_not.valid.url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Invalid grands
      ///
      /// Locales: en, ru
      static let authError_invalidGrands = Rswift.StringResource(key: "auth.error_invalid.grands", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Is favorite
      ///
      /// Locales: en, ru
      static let editProjectScreen_favoriteCellName = Rswift.StringResource(key: "edit.project.screen_favorite.cell.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Is favorite
      ///
      /// Locales: en, ru
      static let editProjectScreen_favoriteSectionHeader = Rswift.StringResource(key: "edit.project.screen_favorite.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Less comment first
      ///
      /// Locales: en, ru
      static let taskDescriptor_commentsAscending = Rswift.StringResource(key: "task.descriptor_comments.ascending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, ru
      static let settingsController_alertLogoutConfirmActionTitle = Rswift.StringResource(key: "settings.controller_alert.logout.confirm.action.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Log out from current account
      ///
      /// Locales: en, ru
      static let settingsController_logoutSectionHeader = Rswift.StringResource(key: "settings.controller_logout.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ru
      static let settingsController_сellLogoutTitle = Rswift.StringResource(key: "settings.controller_сell.logout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Low
      ///
      /// Locales: en, ru
      static let priority_normal = Rswift.StringResource(key: "priority_normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Lower priority first
      ///
      /// Locales: en, ru
      static let taskDescriptor_priorityAscending = Rswift.StringResource(key: "task.descriptor_priority.ascending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Make favorite
      ///
      /// Locales: en, ru
      static let tableView_contextualactionMakeFavorite = Rswift.StringResource(key: "table.view_contextualaction.make.favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Make not favorite
      ///
      /// Locales: en, ru
      static let tableView_contextualactionMakeNotFavorite = Rswift.StringResource(key: "table.view_contextualaction.make.not.favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Medium
      ///
      /// Locales: en, ru
      static let priority_high = Rswift.StringResource(key: "priority_high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: More comments first
      ///
      /// Locales: en, ru
      static let taskDescriptor_commentsDescending = Rswift.StringResource(key: "task.descriptor_comments.descending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Name can't be empty
      ///
      /// Locales: en, ru
      static let editProjectScreen_alertEmptyName = Rswift.StringResource(key: "edit.project.screen_alert.empty.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Name can't be empty
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertEmptyName = Rswift.StringResource(key: "edit.task.screen_alert.empty.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Name ordering options
      ///
      /// Locales: en, ru
      static let projectFiltersScreen_nameSection = Rswift.StringResource(key: "project.filters.screen_name.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: New project created
      ///
      /// Locales: en, ru
      static let editProjectScreen_alertProjectCreated = Rswift.StringResource(key: "edit.project.screen_alert.project.created", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: New project name
      ///
      /// Locales: en, ru
      static let editProjectScreen_textfieldCellPlaceholder = Rswift.StringResource(key: "edit.project.screen_textfield.cell.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: New task created
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertTaskCreated = Rswift.StringResource(key: "edit.task.screen_alert.task.created", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: New task name
      ///
      /// Locales: en, ru
      static let editTaskScreen_textfieldCellPlaceholder = Rswift.StringResource(key: "edit.task.screen_textfield.cell.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No internet connection. Can't sync data
      ///
      /// Locales: en, ru
      static let noNetworkView_title = Rswift.StringResource(key: "no.network.view_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Parent project
      ///
      /// Locales: en, ru
      static let editProjectScreen_parentSectionHeader = Rswift.StringResource(key: "edit.project.screen_parent.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Project color
      ///
      /// Locales: en, ru
      static let editProjectScreen_colorSectionHeader = Rswift.StringResource(key: "edit.project.screen_color.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Project edited
      ///
      /// Locales: en, ru
      static let editProjectScreen_alertProjectEdited = Rswift.StringResource(key: "edit.project.screen_alert.project.edited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Project name
      ///
      /// Locales: en, ru
      static let editProjectScreen_nameSectionHeader = Rswift.StringResource(key: "edit.project.screen_name.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Projects
      ///
      /// Locales: en, ru
      static let splitMenu_allProjects = Rswift.StringResource(key: "split.menu_all.projects", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Projects
      ///
      /// Locales: en, ru
      static let tabBarController_projectsListTitle = Rswift.StringResource(key: "tab.bar.controller_projects.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Projects list can be outdated
      ///
      /// Locales: en, ru
      static let reachability_fetchProjects = Rswift.StringResource(key: "reachability_fetch.projects", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Related project
      ///
      /// Locales: en, ru
      static let editTaskScreen_projectSectionHeader = Rswift.StringResource(key: "edit.task.screen_project.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Reload page
      ///
      /// Locales: en, ru
      static let authorizationScreen_alertReloadButton = Rswift.StringResource(key: "authorization.screen_alert.reload.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: en, ru
      static let addEditControllers_resetBarbuttonTitle = Rswift.StringResource(key: "add.edit.controllers_reset.barbutton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: en, ru
      static let filtersScreen_resetTitle = Rswift.StringResource(key: "filters.screen_reset.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Search project
      ///
      /// Locales: en, ru
      static let searchBar_project = Rswift.StringResource(key: "search.bar_project", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Search task
      ///
      /// Locales: en, ru
      static let searchBar_task = Rswift.StringResource(key: "search.bar_task", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select date and time
      ///
      /// Locales: en, ru
      static let editTaskScreen_dateCellTitle = Rswift.StringResource(key: "edit.task.screen_date.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select labels
      ///
      /// Locales: en, ru
      static let editTaskScreen_labelCellTitle = Rswift.StringResource(key: "edit.task.screen_label.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select one of given colors to mark new project with a color label.
      ///
      /// Locales: en, ru
      static let editProjectScreen_colorSectionFooter = Rswift.StringResource(key: "edit.project.screen_color.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select one of given labels to mark new task.
      ///
      /// Locales: en, ru
      static let editTaskScreen_labelSectionFooter = Rswift.StringResource(key: "edit.task.screen_label.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select project
      ///
      /// Locales: en, ru
      static let editTaskScreen_projectCellTitle = Rswift.StringResource(key: "edit.task.screen_project.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ru
      static let settingsController_title = Rswift.StringResource(key: "settings.controller_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ru
      static let splitMenu_settings = Rswift.StringResource(key: "split.menu_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ru
      static let tabBarController_settingsTitle = Rswift.StringResource(key: "tab.bar.controller_settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show by name A-Z
      ///
      /// Locales: en, ru
      static let projectDescriptor_nameAz = Rswift.StringResource(key: "project.descriptor_name.az", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show by name A-Z
      ///
      /// Locales: en, ru
      static let taskDescriptor_nameAz = Rswift.StringResource(key: "task.descriptor_name.az", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show by name Z-A
      ///
      /// Locales: en, ru
      static let projectDescriptor_nameZa = Rswift.StringResource(key: "project.descriptor_name.za", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show by name Z-A
      ///
      /// Locales: en, ru
      static let taskDescriptor_nameZa = Rswift.StringResource(key: "task.descriptor_name.za", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show favorite first
      ///
      /// Locales: en, ru
      static let projectDescriptor_favoriteFirst = Rswift.StringResource(key: "project.descriptor_favorite.first", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Show non-favorite first
      ///
      /// Locales: en, ru
      static let projectDescriptor_favoriteLast = Rswift.StringResource(key: "project.descriptor_favorite.last", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sort projects by 'favorite'
      ///
      /// Locales: en, ru
      static let projectFiltersScreen_favoriteSection = Rswift.StringResource(key: "project.filters.screen_favorite.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sync with your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static let watchSession_contextUpdatingFailed = Rswift.StringResource(key: "watch.session_context.updating.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Task deleted
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertTaskDeleted = Rswift.StringResource(key: "edit.task.screen_alert.task.deleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Task edited
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertTaskEdited = Rswift.StringResource(key: "edit.task.screen_alert.task.edited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Task label
      ///
      /// Locales: en, ru
      static let editTaskScreen_labelSectionHeader = Rswift.StringResource(key: "edit.task.screen_label.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Task name
      ///
      /// Locales: en, ru
      static let editTaskScreen_nameSectionHeader = Rswift.StringResource(key: "edit.task.screen_name.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Task priority
      ///
      /// Locales: en, ru
      static let editTaskScreen_prioritySectionHeader = Rswift.StringResource(key: "edit.task.screen_priority.section.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Tasks
      ///
      /// Locales: en, ru
      static let splitMenu_allTasks = Rswift.StringResource(key: "split.menu_all.tasks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Tasks
      ///
      /// Locales: en, ru
      static let tabBarController_tasksListTitle = Rswift.StringResource(key: "tab.bar.controller_tasks.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Tasks list can be outdated
      ///
      /// Locales: en, ru
      static let reachability_fetchTasks = Rswift.StringResource(key: "reachability_fetch.tasks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try add task later
      ///
      /// Locales: en, ru
      static let reachability_addTask = Rswift.StringResource(key: "reachability_add.task", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try close task later
      ///
      /// Locales: en, ru
      static let reachability_closeTask = Rswift.StringResource(key: "reachability_close.task", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try create project later
      ///
      /// Locales: en, ru
      static let reachability_addProject = Rswift.StringResource(key: "reachability_add.project", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try delete project later
      ///
      /// Locales: en, ru
      static let reachability_deleteProject = Rswift.StringResource(key: "reachability_delete.project", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try delete task later
      ///
      /// Locales: en, ru
      static let reachability_deleteTask = Rswift.StringResource(key: "reachability_delete.task", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try edit project later
      ///
      /// Locales: en, ru
      static let reachability_editProject = Rswift.StringResource(key: "reachability_edit.project", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try edit task later
      ///
      /// Locales: en, ru
      static let reachability_editTask = Rswift.StringResource(key: "reachability_edit.task", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Try log out later
      ///
      /// Locales: en, ru
      static let reachability_addLogOut = Rswift.StringResource(key: "reachability_add.logOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Use symbols a-z, A-Z, 0-9, or special characters (?!":;%$#@).
      ///
      /// Locales: en, ru
      static let editProjectScreen_nameSectionFooter = Rswift.StringResource(key: "edit.project.screen_name.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Use symbols a-z, A-Z, 0-9, or special characters (?!":;%$#@).
      ///
      /// Locales: en, ru
      static let editTaskScreen_nameSectionFooter = Rswift.StringResource(key: "edit.task.screen_name.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You can assign select task priority. By default it is 'Priority 4 - Low'.
      ///
      /// Locales: en, ru
      static let editTaskScreen_prioritySectionFooter = Rswift.StringResource(key: "edit.task.screen_priority.section.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You can not estimate your task for date untill current
      ///
      /// Locales: en, ru
      static let datepickerController_estimatingAlertTitle = Rswift.StringResource(key: "datepicker.controller_estimating.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You don't have any projects here
      ///
      /// Locales: en, ru
      static let tableview_noProjectsTitle = Rswift.StringResource(key: "tableview_no.projects.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You don't have any tasks here
      ///
      /// Locales: en, ru
      static let tableview_noTasksTitle = Rswift.StringResource(key: "tableview_no.tasks.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: ОК
      ///
      /// Locales: en, ru
      static let editProjectScreen_alertOk = Rswift.StringResource(key: "edit.project.screen_alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: ОК
      ///
      /// Locales: en, ru
      static let editTaskScreen_alertOk = Rswift.StringResource(key: "edit.task.screen_alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Add new project
      ///
      /// Locales: en, ru
      static func editProjectScreen_titleAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_title.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_title.add"
        }

        return NSLocalizedString("edit.project.screen_title.add", bundle: bundle, comment: "")
      }

      /// en translation: Add new project
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertAddprojectButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.addproject.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.addproject.button"
        }

        return NSLocalizedString("projects.list.screen_alert.addproject.button", bundle: bundle, comment: "")
      }

      /// en translation: Add new task
      ///
      /// Locales: en, ru
      static func editTaskScreen_titleAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_title.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_title.add"
        }

        return NSLocalizedString("edit.task.screen_title.add", bundle: bundle, comment: "")
      }

      /// en translation: Add one by clicking '+' button below
      ///
      /// Locales: en, ru
      static func tableview_noProjectsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tableview_no.projects.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tableview_no.projects.message"
        }

        return NSLocalizedString("tableview_no.projects.message", bundle: bundle, comment: "")
      }

      /// en translation: Add one by clicking '+' button below
      ///
      /// Locales: en, ru
      static func tableview_noTasksMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tableview_no.tasks.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tableview_no.tasks.message"
        }

        return NSLocalizedString("tableview_no.tasks.message", bundle: bundle, comment: "")
      }

      /// en translation: After logout your login and password will be deleted from device.
      ///
      /// Locales: en, ru
      static func settingsController_logoutSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_logout.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_logout.section.footer"
        }

        return NSLocalizedString("settings.controller_logout.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: All projects
      ///
      /// Locales: en, ru
      static func projectsListScreen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_title"
        }

        return NSLocalizedString("projects.list.screen_title", bundle: bundle, comment: "")
      }

      /// en translation: All tasks
      ///
      /// Locales: en, ru
      static func allTasksController_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all.tasks.controller_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all.tasks.controller_title"
        }

        return NSLocalizedString("all.tasks.controller_title", bundle: bundle, comment: "")
      }

      /// en translation: Attention! Project will be deleted completely. Restoring is impossible.
      ///
      /// Locales: en, ru
      static func editProjectScreen_deleteSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_delete.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_delete.section.footer"
        }

        return NSLocalizedString("edit.project.screen_delete.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Attention! task will be deleted completely. Restoring is impossible.
      ///
      /// Locales: en, ru
      static func editTaskScreen_deleteSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_delete.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_delete.section.footer"
        }

        return NSLocalizedString("edit.task.screen_delete.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Authorization
      ///
      /// Locales: en, ru
      static func authorizationScreen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorization.screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authorization.screen_title"
        }

        return NSLocalizedString("authorization.screen_title", bundle: bundle, comment: "")
      }

      /// en translation: By creation date
      ///
      /// Locales: en, ru
      static func tasksFiltersScreen_creationSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tasks.filters.screen_creation.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tasks.filters.screen_creation.section"
        }

        return NSLocalizedString("tasks.filters.screen_creation.section", bundle: bundle, comment: "")
      }

      /// en translation: By date ascending
      ///
      /// Locales: en, ru
      static func taskDescriptor_dateAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_date.ascending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_date.ascending"
        }

        return NSLocalizedString("task.descriptor_date.ascending", bundle: bundle, comment: "")
      }

      /// en translation: By date descending
      ///
      /// Locales: en, ru
      static func taskDescriptor_dateDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_date.descending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_date.descending"
        }

        return NSLocalizedString("task.descriptor_date.descending", bundle: bundle, comment: "")
      }

      /// en translation: By planned date
      ///
      /// Locales: en, ru
      static func tasksFiltersScreen_dateSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tasks.filters.screen_date.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tasks.filters.screen_date.section"
        }

        return NSLocalizedString("tasks.filters.screen_date.section", bundle: bundle, comment: "")
      }

      /// en translation: By priority
      ///
      /// Locales: en, ru
      static func tasksFiltersScreen_prioritySection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tasks.filters.screen_priority.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tasks.filters.screen_priority.section"
        }

        return NSLocalizedString("tasks.filters.screen_priority.section", bundle: bundle, comment: "")
      }

      /// en translation: Can't get authorization token from server. Try later
      ///
      /// Locales: en, ru
      static func authError_emptyToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.error_empty.token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auth.error_empty.token"
        }

        return NSLocalizedString("auth.error_empty.token", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertCancelDeletionButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.cancel.deletion.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.cancel.deletion.button"
        }

        return NSLocalizedString("projects.list.screen_alert.cancel.deletion.button", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertCanceladdingButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.canceladding.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.canceladding.button"
        }

        return NSLocalizedString("projects.list.screen_alert.canceladding.button", bundle: bundle, comment: "")
      }

      /// en translation: Change ordering
      ///
      /// Locales: en, ru
      static func filtersScreen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filters.screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "filters.screen_title"
        }

        return NSLocalizedString("filters.screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Choose color
      ///
      /// Locales: en, ru
      static func editProjectScreen_colorCellEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_color.cell.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_color.cell.empty"
        }

        return NSLocalizedString("edit.project.screen_color.cell.empty", bundle: bundle, comment: "")
      }

      /// en translation: Choose parent
      ///
      /// Locales: en, ru
      static func editProjectScreen_parentCellEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_parent.cell.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_parent.cell.empty"
        }

        return NSLocalizedString("edit.project.screen_parent.cell.empty", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, ru
      static func tableView_contextualactionClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table.view_contextualaction.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table.view_contextualaction.close"
        }

        return NSLocalizedString("table.view_contextualaction.close", bundle: bundle, comment: "")
      }

      /// en translation: Converting data to update info on your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static func watchSession_decodingFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("watch.session_decoding.failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "watch.session_decoding.failed"
        }

        return NSLocalizedString("watch.session_decoding.failed", bundle: bundle, comment: "")
      }

      /// en translation: Converting data to update info on your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static func watchSession_encodingFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("watch.session_encoding.failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "watch.session_encoding.failed"
        }

        return NSLocalizedString("watch.session_encoding.failed", bundle: bundle, comment: "")
      }

      /// en translation: Created long ago
      ///
      /// Locales: en, ru
      static func taskDescriptor_createdAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_created.ascending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_created.ascending"
        }

        return NSLocalizedString("task.descriptor_created.ascending", bundle: bundle, comment: "")
      }

      /// en translation: Created recently
      ///
      /// Locales: en, ru
      static func taskDescriptor_createdDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_created.descending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_created.descending"
        }

        return NSLocalizedString("task.descriptor_created.descending", bundle: bundle, comment: "")
      }

      /// en translation: Default
      ///
      /// Locales: en, ru
      static func priority_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priority_low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priority_low"
        }

        return NSLocalizedString("priority_low", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ru
      static func editTaskScreen_deleteCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_delete.cell.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_delete.cell.title"
        }

        return NSLocalizedString("edit.task.screen_delete.cell.title", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertConfirmDeletionButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.confirm.deletion.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.confirm.deletion.button"
        }

        return NSLocalizedString("projects.list.screen_alert.confirm.deletion.button", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ru
      static func tableView_contextualactionDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table.view_contextualaction.delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table.view_contextualaction.delete"
        }

        return NSLocalizedString("table.view_contextualaction.delete", bundle: bundle, comment: "")
      }

      /// en translation: Delete project
      ///
      /// Locales: en, ru
      static func editProjectScreen_deleteSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_delete.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_delete.section.header"
        }

        return NSLocalizedString("edit.project.screen_delete.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Delete task
      ///
      /// Locales: en, ru
      static func editTaskScreen_deleteSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_delete.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_delete.section.header"
        }

        return NSLocalizedString("edit.task.screen_delete.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Deleted
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.deleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.deleted"
        }

        return NSLocalizedString("projects.list.screen_alert.deleted", bundle: bundle, comment: "")
      }

      /// en translation: Device is offline
      ///
      /// Locales: en, ru
      static func reachability_offlineTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_offline.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_offline.title"
        }

        return NSLocalizedString("reachability_offline.title", bundle: bundle, comment: "")
      }

      /// en translation: Do you really want to delete project?
      ///
      /// Locales: en, ru
      static func projectsListScreen_alertDeleteprojectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projects.list.screen_alert.deleteproject.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projects.list.screen_alert.deleteproject.title"
        }

        return NSLocalizedString("projects.list.screen_alert.deleteproject.title", bundle: bundle, comment: "")
      }

      /// en translation: Do you really want to delete task?
      ///
      /// Locales: en, ru
      static func editTaskScreen_deleteConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_delete.confirmation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_delete.confirmation.title"
        }

        return NSLocalizedString("edit.task.screen_delete.confirmation.title", bundle: bundle, comment: "")
      }

      /// en translation: Do you really want to log out?
      ///
      /// Locales: en, ru
      static func settingsController_alertLogoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_alert.logout.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_alert.logout.title"
        }

        return NSLocalizedString("settings.controller_alert.logout.title", bundle: bundle, comment: "")
      }

      /// en translation: Due date
      ///
      /// Locales: en, ru
      static func editTaskScreen_dateSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_date.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_date.section.header"
        }

        return NSLocalizedString("edit.task.screen_date.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, ru
      static func tableView_contextualactionEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table.view_contextualaction.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table.view_contextualaction.edit"
        }

        return NSLocalizedString("table.view_contextualaction.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit project
      ///
      /// Locales: en, ru
      static func editProjectScreen_titleEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_title.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_title.edit"
        }

        return NSLocalizedString("edit.project.screen_title.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit task
      ///
      /// Locales: en, ru
      static func editTaskScreen_titleEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_title.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_title.edit"
        }

        return NSLocalizedString("edit.task.screen_title.edit", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ru
      static func authorizationScreen_alertErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorization.screen_alert.errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authorization.screen_alert.errorMessage"
        }

        return NSLocalizedString("authorization.screen_alert.errorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Error occured. Try later.
      ///
      /// Locales: en, ru
      static func editProjectScreen_alertProjectActionError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_alert.project.action.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_alert.project.action.error"
        }

        return NSLocalizedString("edit.project.screen_alert.project.action.error", bundle: bundle, comment: "")
      }

      /// en translation: Error occured. Try later.
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertTaskActionError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.task.action.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.task.action.error"
        }

        return NSLocalizedString("edit.task.screen_alert.task.action.error", bundle: bundle, comment: "")
      }

      /// en translation: High
      ///
      /// Locales: en, ru
      static func priority_urgent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priority_urgent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priority_urgent"
        }

        return NSLocalizedString("priority_urgent", bundle: bundle, comment: "")
      }

      /// en translation: Higher priority first
      ///
      /// Locales: en, ru
      static func taskDescriptor_priorityDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_priority.descending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_priority.descending"
        }

        return NSLocalizedString("task.descriptor_priority.descending", bundle: bundle, comment: "")
      }

      /// en translation: If the task is a part of existing project, select it to keep the hierarchy. By default all new tasks without related project are moved to Inbox project.
      ///
      /// Locales: en, ru
      static func editTaskScreen_projectSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_project.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_project.section.footer"
        }

        return NSLocalizedString("edit.task.screen_project.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: If you mark your project as favorite, it will be placed on top of your projects list.
      ///
      /// Locales: en, ru
      static func editProjectScreen_favoriteSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_favorite.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_favorite.section.footer"
        }

        return NSLocalizedString("edit.project.screen_favorite.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: If your new project is a subproject of existing one, select its parent to keep the hierarchy.
      ///
      /// Locales: en, ru
      static func editProjectScreen_parentSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_parent.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_parent.section.footer"
        }

        return NSLocalizedString("edit.project.screen_parent.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: If your task has deadline - select appropriate date and time, it will be displayed on task's cell. By default task doesn't have due date.
      ///
      /// Locales: en, ru
      static func editTaskScreen_dateSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_date.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_date.section.footer"
        }

        return NSLocalizedString("edit.task.screen_date.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Invalid authorization redirect. Try again
      ///
      /// Locales: en, ru
      static func authError_notValidUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.error_not.valid.url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auth.error_not.valid.url"
        }

        return NSLocalizedString("auth.error_not.valid.url", bundle: bundle, comment: "")
      }

      /// en translation: Invalid grands
      ///
      /// Locales: en, ru
      static func authError_invalidGrands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.error_invalid.grands", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auth.error_invalid.grands"
        }

        return NSLocalizedString("auth.error_invalid.grands", bundle: bundle, comment: "")
      }

      /// en translation: Is favorite
      ///
      /// Locales: en, ru
      static func editProjectScreen_favoriteCellName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_favorite.cell.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_favorite.cell.name"
        }

        return NSLocalizedString("edit.project.screen_favorite.cell.name", bundle: bundle, comment: "")
      }

      /// en translation: Is favorite
      ///
      /// Locales: en, ru
      static func editProjectScreen_favoriteSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_favorite.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_favorite.section.header"
        }

        return NSLocalizedString("edit.project.screen_favorite.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Less comment first
      ///
      /// Locales: en, ru
      static func taskDescriptor_commentsAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_comments.ascending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_comments.ascending"
        }

        return NSLocalizedString("task.descriptor_comments.ascending", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, ru
      static func settingsController_alertLogoutConfirmActionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_alert.logout.confirm.action.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_alert.logout.confirm.action.title"
        }

        return NSLocalizedString("settings.controller_alert.logout.confirm.action.title", bundle: bundle, comment: "")
      }

      /// en translation: Log out from current account
      ///
      /// Locales: en, ru
      static func settingsController_logoutSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_logout.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_logout.section.header"
        }

        return NSLocalizedString("settings.controller_logout.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ru
      static func settingsController_сellLogoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_сell.logout.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_сell.logout.title"
        }

        return NSLocalizedString("settings.controller_сell.logout.title", bundle: bundle, comment: "")
      }

      /// en translation: Low
      ///
      /// Locales: en, ru
      static func priority_normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priority_normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priority_normal"
        }

        return NSLocalizedString("priority_normal", bundle: bundle, comment: "")
      }

      /// en translation: Lower priority first
      ///
      /// Locales: en, ru
      static func taskDescriptor_priorityAscending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_priority.ascending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_priority.ascending"
        }

        return NSLocalizedString("task.descriptor_priority.ascending", bundle: bundle, comment: "")
      }

      /// en translation: Make favorite
      ///
      /// Locales: en, ru
      static func tableView_contextualactionMakeFavorite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table.view_contextualaction.make.favorite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table.view_contextualaction.make.favorite"
        }

        return NSLocalizedString("table.view_contextualaction.make.favorite", bundle: bundle, comment: "")
      }

      /// en translation: Make not favorite
      ///
      /// Locales: en, ru
      static func tableView_contextualactionMakeNotFavorite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table.view_contextualaction.make.not.favorite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table.view_contextualaction.make.not.favorite"
        }

        return NSLocalizedString("table.view_contextualaction.make.not.favorite", bundle: bundle, comment: "")
      }

      /// en translation: Medium
      ///
      /// Locales: en, ru
      static func priority_high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priority_high", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "priority_high"
        }

        return NSLocalizedString("priority_high", bundle: bundle, comment: "")
      }

      /// en translation: More comments first
      ///
      /// Locales: en, ru
      static func taskDescriptor_commentsDescending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_comments.descending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_comments.descending"
        }

        return NSLocalizedString("task.descriptor_comments.descending", bundle: bundle, comment: "")
      }

      /// en translation: Name can't be empty
      ///
      /// Locales: en, ru
      static func editProjectScreen_alertEmptyName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_alert.empty.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_alert.empty.name"
        }

        return NSLocalizedString("edit.project.screen_alert.empty.name", bundle: bundle, comment: "")
      }

      /// en translation: Name can't be empty
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertEmptyName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.empty.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.empty.name"
        }

        return NSLocalizedString("edit.task.screen_alert.empty.name", bundle: bundle, comment: "")
      }

      /// en translation: Name ordering options
      ///
      /// Locales: en, ru
      static func projectFiltersScreen_nameSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.filters.screen_name.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.filters.screen_name.section"
        }

        return NSLocalizedString("project.filters.screen_name.section", bundle: bundle, comment: "")
      }

      /// en translation: New project created
      ///
      /// Locales: en, ru
      static func editProjectScreen_alertProjectCreated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_alert.project.created", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_alert.project.created"
        }

        return NSLocalizedString("edit.project.screen_alert.project.created", bundle: bundle, comment: "")
      }

      /// en translation: New project name
      ///
      /// Locales: en, ru
      static func editProjectScreen_textfieldCellPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_textfield.cell.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_textfield.cell.placeholder"
        }

        return NSLocalizedString("edit.project.screen_textfield.cell.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: New task created
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertTaskCreated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.task.created", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.task.created"
        }

        return NSLocalizedString("edit.task.screen_alert.task.created", bundle: bundle, comment: "")
      }

      /// en translation: New task name
      ///
      /// Locales: en, ru
      static func editTaskScreen_textfieldCellPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_textfield.cell.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_textfield.cell.placeholder"
        }

        return NSLocalizedString("edit.task.screen_textfield.cell.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: No internet connection. Can't sync data
      ///
      /// Locales: en, ru
      static func noNetworkView_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.network.view_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no.network.view_title"
        }

        return NSLocalizedString("no.network.view_title", bundle: bundle, comment: "")
      }

      /// en translation: Parent project
      ///
      /// Locales: en, ru
      static func editProjectScreen_parentSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_parent.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_parent.section.header"
        }

        return NSLocalizedString("edit.project.screen_parent.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Project color
      ///
      /// Locales: en, ru
      static func editProjectScreen_colorSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_color.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_color.section.header"
        }

        return NSLocalizedString("edit.project.screen_color.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Project edited
      ///
      /// Locales: en, ru
      static func editProjectScreen_alertProjectEdited(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_alert.project.edited", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_alert.project.edited"
        }

        return NSLocalizedString("edit.project.screen_alert.project.edited", bundle: bundle, comment: "")
      }

      /// en translation: Project name
      ///
      /// Locales: en, ru
      static func editProjectScreen_nameSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_name.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_name.section.header"
        }

        return NSLocalizedString("edit.project.screen_name.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Projects
      ///
      /// Locales: en, ru
      static func splitMenu_allProjects(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("split.menu_all.projects", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "split.menu_all.projects"
        }

        return NSLocalizedString("split.menu_all.projects", bundle: bundle, comment: "")
      }

      /// en translation: Projects
      ///
      /// Locales: en, ru
      static func tabBarController_projectsListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.bar.controller_projects.list.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.bar.controller_projects.list.title"
        }

        return NSLocalizedString("tab.bar.controller_projects.list.title", bundle: bundle, comment: "")
      }

      /// en translation: Projects list can be outdated
      ///
      /// Locales: en, ru
      static func reachability_fetchProjects(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_fetch.projects", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_fetch.projects"
        }

        return NSLocalizedString("reachability_fetch.projects", bundle: bundle, comment: "")
      }

      /// en translation: Related project
      ///
      /// Locales: en, ru
      static func editTaskScreen_projectSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_project.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_project.section.header"
        }

        return NSLocalizedString("edit.task.screen_project.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Reload page
      ///
      /// Locales: en, ru
      static func authorizationScreen_alertReloadButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorization.screen_alert.reload.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authorization.screen_alert.reload.button"
        }

        return NSLocalizedString("authorization.screen_alert.reload.button", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: en, ru
      static func addEditControllers_resetBarbuttonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add.edit.controllers_reset.barbutton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.edit.controllers_reset.barbutton.title"
        }

        return NSLocalizedString("add.edit.controllers_reset.barbutton.title", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: en, ru
      static func filtersScreen_resetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filters.screen_reset.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "filters.screen_reset.title"
        }

        return NSLocalizedString("filters.screen_reset.title", bundle: bundle, comment: "")
      }

      /// en translation: Search project
      ///
      /// Locales: en, ru
      static func searchBar_project(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search.bar_project", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search.bar_project"
        }

        return NSLocalizedString("search.bar_project", bundle: bundle, comment: "")
      }

      /// en translation: Search task
      ///
      /// Locales: en, ru
      static func searchBar_task(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search.bar_task", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search.bar_task"
        }

        return NSLocalizedString("search.bar_task", bundle: bundle, comment: "")
      }

      /// en translation: Select date and time
      ///
      /// Locales: en, ru
      static func editTaskScreen_dateCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_date.cell.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_date.cell.title"
        }

        return NSLocalizedString("edit.task.screen_date.cell.title", bundle: bundle, comment: "")
      }

      /// en translation: Select labels
      ///
      /// Locales: en, ru
      static func editTaskScreen_labelCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_label.cell.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_label.cell.title"
        }

        return NSLocalizedString("edit.task.screen_label.cell.title", bundle: bundle, comment: "")
      }

      /// en translation: Select one of given colors to mark new project with a color label.
      ///
      /// Locales: en, ru
      static func editProjectScreen_colorSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_color.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_color.section.footer"
        }

        return NSLocalizedString("edit.project.screen_color.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Select one of given labels to mark new task.
      ///
      /// Locales: en, ru
      static func editTaskScreen_labelSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_label.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_label.section.footer"
        }

        return NSLocalizedString("edit.task.screen_label.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Select project
      ///
      /// Locales: en, ru
      static func editTaskScreen_projectCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_project.cell.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_project.cell.title"
        }

        return NSLocalizedString("edit.task.screen_project.cell.title", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ru
      static func settingsController_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.controller_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.controller_title"
        }

        return NSLocalizedString("settings.controller_title", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ru
      static func splitMenu_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("split.menu_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "split.menu_settings"
        }

        return NSLocalizedString("split.menu_settings", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ru
      static func tabBarController_settingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.bar.controller_settings.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.bar.controller_settings.title"
        }

        return NSLocalizedString("tab.bar.controller_settings.title", bundle: bundle, comment: "")
      }

      /// en translation: Show by name A-Z
      ///
      /// Locales: en, ru
      static func projectDescriptor_nameAz(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.descriptor_name.az", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.descriptor_name.az"
        }

        return NSLocalizedString("project.descriptor_name.az", bundle: bundle, comment: "")
      }

      /// en translation: Show by name A-Z
      ///
      /// Locales: en, ru
      static func taskDescriptor_nameAz(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_name.az", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_name.az"
        }

        return NSLocalizedString("task.descriptor_name.az", bundle: bundle, comment: "")
      }

      /// en translation: Show by name Z-A
      ///
      /// Locales: en, ru
      static func projectDescriptor_nameZa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.descriptor_name.za", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.descriptor_name.za"
        }

        return NSLocalizedString("project.descriptor_name.za", bundle: bundle, comment: "")
      }

      /// en translation: Show by name Z-A
      ///
      /// Locales: en, ru
      static func taskDescriptor_nameZa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("task.descriptor_name.za", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "task.descriptor_name.za"
        }

        return NSLocalizedString("task.descriptor_name.za", bundle: bundle, comment: "")
      }

      /// en translation: Show favorite first
      ///
      /// Locales: en, ru
      static func projectDescriptor_favoriteFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.descriptor_favorite.first", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.descriptor_favorite.first"
        }

        return NSLocalizedString("project.descriptor_favorite.first", bundle: bundle, comment: "")
      }

      /// en translation: Show non-favorite first
      ///
      /// Locales: en, ru
      static func projectDescriptor_favoriteLast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.descriptor_favorite.last", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.descriptor_favorite.last"
        }

        return NSLocalizedString("project.descriptor_favorite.last", bundle: bundle, comment: "")
      }

      /// en translation: Sort projects by 'favorite'
      ///
      /// Locales: en, ru
      static func projectFiltersScreen_favoriteSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("project.filters.screen_favorite.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "project.filters.screen_favorite.section"
        }

        return NSLocalizedString("project.filters.screen_favorite.section", bundle: bundle, comment: "")
      }

      /// en translation: Sync with your watch failed. Info on watch device will stay outdated
      ///
      /// Locales: en, ru
      static func watchSession_contextUpdatingFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("watch.session_context.updating.failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "watch.session_context.updating.failed"
        }

        return NSLocalizedString("watch.session_context.updating.failed", bundle: bundle, comment: "")
      }

      /// en translation: Task deleted
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertTaskDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.task.deleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.task.deleted"
        }

        return NSLocalizedString("edit.task.screen_alert.task.deleted", bundle: bundle, comment: "")
      }

      /// en translation: Task edited
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertTaskEdited(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.task.edited", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.task.edited"
        }

        return NSLocalizedString("edit.task.screen_alert.task.edited", bundle: bundle, comment: "")
      }

      /// en translation: Task label
      ///
      /// Locales: en, ru
      static func editTaskScreen_labelSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_label.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_label.section.header"
        }

        return NSLocalizedString("edit.task.screen_label.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Task name
      ///
      /// Locales: en, ru
      static func editTaskScreen_nameSectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_name.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_name.section.header"
        }

        return NSLocalizedString("edit.task.screen_name.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Task priority
      ///
      /// Locales: en, ru
      static func editTaskScreen_prioritySectionHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_priority.section.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_priority.section.header"
        }

        return NSLocalizedString("edit.task.screen_priority.section.header", bundle: bundle, comment: "")
      }

      /// en translation: Tasks
      ///
      /// Locales: en, ru
      static func splitMenu_allTasks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("split.menu_all.tasks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "split.menu_all.tasks"
        }

        return NSLocalizedString("split.menu_all.tasks", bundle: bundle, comment: "")
      }

      /// en translation: Tasks
      ///
      /// Locales: en, ru
      static func tabBarController_tasksListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.bar.controller_tasks.list.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.bar.controller_tasks.list.title"
        }

        return NSLocalizedString("tab.bar.controller_tasks.list.title", bundle: bundle, comment: "")
      }

      /// en translation: Tasks list can be outdated
      ///
      /// Locales: en, ru
      static func reachability_fetchTasks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_fetch.tasks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_fetch.tasks"
        }

        return NSLocalizedString("reachability_fetch.tasks", bundle: bundle, comment: "")
      }

      /// en translation: Try add task later
      ///
      /// Locales: en, ru
      static func reachability_addTask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_add.task", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_add.task"
        }

        return NSLocalizedString("reachability_add.task", bundle: bundle, comment: "")
      }

      /// en translation: Try close task later
      ///
      /// Locales: en, ru
      static func reachability_closeTask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_close.task", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_close.task"
        }

        return NSLocalizedString("reachability_close.task", bundle: bundle, comment: "")
      }

      /// en translation: Try create project later
      ///
      /// Locales: en, ru
      static func reachability_addProject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_add.project", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_add.project"
        }

        return NSLocalizedString("reachability_add.project", bundle: bundle, comment: "")
      }

      /// en translation: Try delete project later
      ///
      /// Locales: en, ru
      static func reachability_deleteProject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_delete.project", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_delete.project"
        }

        return NSLocalizedString("reachability_delete.project", bundle: bundle, comment: "")
      }

      /// en translation: Try delete task later
      ///
      /// Locales: en, ru
      static func reachability_deleteTask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_delete.task", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_delete.task"
        }

        return NSLocalizedString("reachability_delete.task", bundle: bundle, comment: "")
      }

      /// en translation: Try edit project later
      ///
      /// Locales: en, ru
      static func reachability_editProject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_edit.project", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_edit.project"
        }

        return NSLocalizedString("reachability_edit.project", bundle: bundle, comment: "")
      }

      /// en translation: Try edit task later
      ///
      /// Locales: en, ru
      static func reachability_editTask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_edit.task", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_edit.task"
        }

        return NSLocalizedString("reachability_edit.task", bundle: bundle, comment: "")
      }

      /// en translation: Try log out later
      ///
      /// Locales: en, ru
      static func reachability_addLogOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reachability_add.logOut", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reachability_add.logOut"
        }

        return NSLocalizedString("reachability_add.logOut", bundle: bundle, comment: "")
      }

      /// en translation: Use symbols a-z, A-Z, 0-9, or special characters (?!":;%$#@).
      ///
      /// Locales: en, ru
      static func editProjectScreen_nameSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_name.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_name.section.footer"
        }

        return NSLocalizedString("edit.project.screen_name.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: Use symbols a-z, A-Z, 0-9, or special characters (?!":;%$#@).
      ///
      /// Locales: en, ru
      static func editTaskScreen_nameSectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_name.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_name.section.footer"
        }

        return NSLocalizedString("edit.task.screen_name.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: You can assign select task priority. By default it is 'Priority 4 - Low'.
      ///
      /// Locales: en, ru
      static func editTaskScreen_prioritySectionFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_priority.section.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_priority.section.footer"
        }

        return NSLocalizedString("edit.task.screen_priority.section.footer", bundle: bundle, comment: "")
      }

      /// en translation: You can not estimate your task for date untill current
      ///
      /// Locales: en, ru
      static func datepickerController_estimatingAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("datepicker.controller_estimating.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "datepicker.controller_estimating.alert.title"
        }

        return NSLocalizedString("datepicker.controller_estimating.alert.title", bundle: bundle, comment: "")
      }

      /// en translation: You don't have any projects here
      ///
      /// Locales: en, ru
      static func tableview_noProjectsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tableview_no.projects.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tableview_no.projects.title"
        }

        return NSLocalizedString("tableview_no.projects.title", bundle: bundle, comment: "")
      }

      /// en translation: You don't have any tasks here
      ///
      /// Locales: en, ru
      static func tableview_noTasksTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tableview_no.tasks.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tableview_no.tasks.title"
        }

        return NSLocalizedString("tableview_no.tasks.title", bundle: bundle, comment: "")
      }

      /// en translation: ОК
      ///
      /// Locales: en, ru
      static func editProjectScreen_alertOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.project.screen_alert.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.project.screen_alert.ok"
        }

        return NSLocalizedString("edit.project.screen_alert.ok", bundle: bundle, comment: "")
      }

      /// en translation: ОК
      ///
      /// Locales: en, ru
      static func editTaskScreen_alertOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.task.screen_alert.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit.task.screen_alert.ok"
        }

        return NSLocalizedString("edit.task.screen_alert.ok", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ColorCVCell.validate()
      try _ProjectCell.validate()
      try _TaskCell.validate()
      try _TaskPriorityCell.validate()
      try _TextFieldCell.validate()
    }

    struct _ColorCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ColorCVCell

      let bundle = R.hostingBundle
      let identifier = "ColorCVCell"
      let name = "ColorCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorCVCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'checkmark' is used in nib 'ColorCVCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DeleteButtonCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DeleteButtonCell

      let bundle = R.hostingBundle
      let identifier = "DeleteButtonCell"
      let name = "DeleteButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeleteButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeleteButtonCell
      }

      fileprivate init() {}
    }

    struct _ProjectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProjectCell

      let bundle = R.hostingBundle
      let identifier = "ProjectCell"
      let name = "ProjectCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProjectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProjectCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bookmark.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'bookmark.fill' is used in nib 'ProjectCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectOptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectOptionCell

      let bundle = R.hostingBundle
      let identifier = "SelectOptionCell"
      let name = "SelectOptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectOptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectOptionCell
      }

      fileprivate init() {}
    }

    struct _SelectProjectColorCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectProjectColorCell

      let bundle = R.hostingBundle
      let identifier = "SelectProjectColorCell"
      let name = "SelectProjectColorCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectProjectColorCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectProjectColorCell
      }

      fileprivate init() {}
    }

    struct _TaskCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TaskCell

      let bundle = R.hostingBundle
      let identifier = "TaskCell"
      let name = "TaskCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'calendar' is used in nib 'TaskCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'circle' is used in nib 'TaskCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle.dashed.inset.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'circle.dashed.inset.fill' is used in nib 'TaskCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'exclamationmark.circle' is used in nib 'TaskCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "largecircle.fill.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'largecircle.fill.circle' is used in nib 'TaskCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TaskPriorityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TaskPriorityCell

      let bundle = R.hostingBundle
      let identifier = "TaskPriorityCell"
      let name = "TaskPriorityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskPriorityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskPriorityCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "flag.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'flag.fill' is used in nib 'TaskPriorityCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TextFieldCell

      let bundle = R.hostingBundle
      let identifier = "TextFieldCell"
      let name = "TextFieldCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextFieldCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mic' is used in nib 'TextFieldCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "IconsTintColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconsTintColor' is used in nib 'TextFieldCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ToggleButtonCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ToggleButtonCell

      let bundle = R.hostingBundle
      let identifier = "ToggleButtonCell"
      let name = "ToggleButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToggleButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToggleButtonCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try projectdetails.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try projectslist.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splitmenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try taskslist.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authViewController = StoryboardViewControllerResource<AuthViewController>(identifier: "AuthViewController")
      let bundle = R.hostingBundle
      let name = "Auth"

      func authViewController(_: Void = ()) -> AuthViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.auth().authViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authViewController' could not be loaded from storyboard 'Auth' as 'AuthViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "CellsColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CellsColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconsTintColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconsTintColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct projectdetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addTaskViewController = StoryboardViewControllerResource<AddTaskViewController>(identifier: "AddTaskViewController")
      let bundle = R.hostingBundle
      let datePickerViewController = StoryboardViewControllerResource<DatePickerViewController>(identifier: "DatePickerViewController")
      let editTaskViewController = StoryboardViewControllerResource<EditTaskViewController>(identifier: "EditTaskViewController")
      let name = "Projectdetails"
      let projectDetailsFiltersViewController = StoryboardViewControllerResource<ProjectDetailsFiltersViewController>(identifier: "ProjectDetailsFiltersViewController")
      let projectDetailsViewController = StoryboardViewControllerResource<ProjectDetailsViewController>(identifier: "ProjectDetailsViewController")
      let selectTaskPriorityViewController = StoryboardViewControllerResource<SelectTaskPriorityViewController>(identifier: "SelectTaskPriorityViewController")

      func addTaskViewController(_: Void = ()) -> AddTaskViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTaskViewController)
      }

      func datePickerViewController(_: Void = ()) -> DatePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerViewController)
      }

      func editTaskViewController(_: Void = ()) -> EditTaskViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editTaskViewController)
      }

      func projectDetailsFiltersViewController(_: Void = ()) -> ProjectDetailsFiltersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectDetailsFiltersViewController)
      }

      func projectDetailsViewController(_: Void = ()) -> ProjectDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectDetailsViewController)
      }

      func selectTaskPriorityViewController(_: Void = ()) -> SelectTaskPriorityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectTaskPriorityViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.projectdetails().addTaskViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTaskViewController' could not be loaded from storyboard 'Projectdetails' as 'AddTaskViewController'.") }
        if _R.storyboard.projectdetails().datePickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerViewController' could not be loaded from storyboard 'Projectdetails' as 'DatePickerViewController'.") }
        if _R.storyboard.projectdetails().editTaskViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editTaskViewController' could not be loaded from storyboard 'Projectdetails' as 'EditTaskViewController'.") }
        if _R.storyboard.projectdetails().projectDetailsFiltersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectDetailsFiltersViewController' could not be loaded from storyboard 'Projectdetails' as 'ProjectDetailsFiltersViewController'.") }
        if _R.storyboard.projectdetails().projectDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectDetailsViewController' could not be loaded from storyboard 'Projectdetails' as 'ProjectDetailsViewController'.") }
        if _R.storyboard.projectdetails().selectTaskPriorityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectTaskPriorityViewController' could not be loaded from storyboard 'Projectdetails' as 'SelectTaskPriorityViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct projectslist: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addProjectViewController = StoryboardViewControllerResource<AddProjectViewController>(identifier: "AddProjectViewController")
      let bundle = R.hostingBundle
      let editProjectViewController = StoryboardViewControllerResource<EditProjectViewController>(identifier: "EditProjectViewController")
      let name = "Projectslist"
      let projectFiltersViewController = StoryboardViewControllerResource<ProjectFiltersViewController>(identifier: "ProjectFiltersViewController")
      let projectsListViewController = StoryboardViewControllerResource<ProjectsListViewController>(identifier: "ProjectsListViewController")
      let selectProjectColorViewController = StoryboardViewControllerResource<SelectProjectColorViewController>(identifier: "SelectProjectColorViewController")
      let selectProjectViewController = StoryboardViewControllerResource<SelectProjectViewController>(identifier: "SelectProjectViewController")

      func addProjectViewController(_: Void = ()) -> AddProjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addProjectViewController)
      }

      func editProjectViewController(_: Void = ()) -> EditProjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProjectViewController)
      }

      func projectFiltersViewController(_: Void = ()) -> ProjectFiltersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectFiltersViewController)
      }

      func projectsListViewController(_: Void = ()) -> ProjectsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectsListViewController)
      }

      func selectProjectColorViewController(_: Void = ()) -> SelectProjectColorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectProjectColorViewController)
      }

      func selectProjectViewController(_: Void = ()) -> SelectProjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectProjectViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.projectslist().addProjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addProjectViewController' could not be loaded from storyboard 'Projectslist' as 'AddProjectViewController'.") }
        if _R.storyboard.projectslist().editProjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProjectViewController' could not be loaded from storyboard 'Projectslist' as 'EditProjectViewController'.") }
        if _R.storyboard.projectslist().projectFiltersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectFiltersViewController' could not be loaded from storyboard 'Projectslist' as 'ProjectFiltersViewController'.") }
        if _R.storyboard.projectslist().projectsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectsListViewController' could not be loaded from storyboard 'Projectslist' as 'ProjectsListViewController'.") }
        if _R.storyboard.projectslist().selectProjectColorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectProjectColorViewController' could not be loaded from storyboard 'Projectslist' as 'SelectProjectColorViewController'.") }
        if _R.storyboard.projectslist().selectProjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectProjectViewController' could not be loaded from storyboard 'Projectslist' as 'SelectProjectViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splitmenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Splitmenu"
      let splitMenuViewController = StoryboardViewControllerResource<SplitMenuViewController>(identifier: "SplitMenuViewController")

      func splitMenuViewController(_: Void = ()) -> SplitMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splitMenuViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splitmenu().splitMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splitMenuViewController' could not be loaded from storyboard 'Splitmenu' as 'SplitMenuViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct taskslist: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Taskslist"
      let tasksListFiltersViewController = StoryboardViewControllerResource<TasksListFiltersViewController>(identifier: "TasksListFiltersViewController")
      let tasksListViewController = StoryboardViewControllerResource<TasksListViewController>(identifier: "TasksListViewController")

      func tasksListFiltersViewController(_: Void = ()) -> TasksListFiltersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tasksListFiltersViewController)
      }

      func tasksListViewController(_: Void = ()) -> TasksListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tasksListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.taskslist().tasksListFiltersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tasksListFiltersViewController' could not be loaded from storyboard 'Taskslist' as 'TasksListFiltersViewController'.") }
        if _R.storyboard.taskslist().tasksListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tasksListViewController' could not be loaded from storyboard 'Taskslist' as 'TasksListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
